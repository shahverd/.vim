snippet config
	<?php
	/**
	 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
	 * @copyright Copyright (c] 2005-2016 Zend Technologies USA Inc. (http://www.zend.com]
	 * @license   http://framework.zend.com/license/new-bsd New BSD License
	 */

	namespace ${1:Module};

	use Zend\Router\Http\Literal;
	use Zend\Router\Http\Segment;
	use Zend\ServiceManager\Factory\InvokableFactory;



	return [
		'service_manager' => [
			'abstract_factories' => [
			],
			'aliases' => [
			],
			'factories'=> [
				'${2:module}'       => '$1\Service\Factory\\$1ServiceFactory',
			],
		],
		'controllers' => [
			'factories' => [
				'$2'          => '$1\Controller\Factory\\$1ControllerFactory',
			],
		],
		'form_elements' => [
			'factories' => [
				'$2'       => '$1\Form\\$1\\$1FormFactory',
			],
		],
		'router' => [
			'routes' => [
			],
		],
		'translator' => [
			'locale' => 'en_US',
			'translation_file_patterns' => [
				[
					'type'     => 'gettext',
					'base_dir' => __DIR__ . '/../language',
					'pattern'  => '%s.mo',
				],
			],
		],

		'router' => [
			'routes' => [
				'module' => [
					'child_routes' => [
						'$2' => [
							'type'    => 'Segment',
							'options' => [
								'route'    => '/$2/[:action][/id=:num][/page=:page][/patient=:patient]',
								'defaults' => [
									'controller' => '$2',
								],
							],
						],
					],
				],

			],
		],

		'view_manager' => [
			'template_path_stack' => [
				__DIR__ . '/../view',
			],
		],
		// Placeholder for console routes
		//
		'console' => [
			'router' => [
				'routes' => [
				],
			],
		],
	];


snippet contfac

	<?php
	namespace ${1:Module}\Controller\Factory;

	use Zend\ServiceManager\FactoryInterface;
	use Zend\ServiceManager\ServiceLocatorInterface;

	use Interop\Container\ContainerInterface;
	use Zend\ServiceManager\Factory\InvokableFactory;
	use Zend\ServiceManager\ServiceManager;

	use $1\Controller\\$1Controller;

	class $1ControllerFactory implements FactoryInterface
	{
		public function __invoke(ContainerInterface $container, $requestedName, array $options = null)
		{
			$controller = new $1Controller($container);
			$controller->setDb($container->get('${2:module}'));
			return $controller;
		}
		public function createService(ServiceLocatorInterface $serviceLocator)
		{

		}
	}



snippet crud
	<?php

	namespace ${1:Module}\Controller;

	use Zend\Mvc\Controller\AbstractActionController;
	use Zend\View\Model\ViewModel;

	use Zend\Db\Sql\Sql;

	use Zend\Paginator\Adapter\DbSelect;
	use Zend\Paginator\Paginator;

	use Zend\Db\ResultSet\ResultSet;

	use Zend\ServiceManager\ServiceManager;

	use DoctrineORMModule\Stdlib\Hydrator\DoctrineEntity;

	use \Dashboard\Controller\Vendor\CrudController;

	class $1Controller extends CrudController
	{

		public function viewAction($admin = false)
		{
			$entity_id = $this->params()->fromRoute('num');
			$page = $this->params()->fromRoute('page');

			$data = $this->db->find$1($entity_id, $admin);

			return new ViewModel([
				'item' => $data,
				'messages'  => $this->flashmessenger()->getMessages(),
			]);

		}


		public function deleteAction($admin = false)
		{
			$entity_id = $this->params()->fromRoute('num');

			$result = $this->db->delete$1($entity_id, $admin);

			$this->flashmessenger()->addMessage('$1 was deleted successfully.');

			return $this->redirect()->toRoute('module/' . ($admin ? '${2:module}-admin' : '$2'), ['action' => 'list']);

		}


		public function listAction($admin = false)
		{
			$page = $this->params()->fromRoute('page');
			$paginatedItems = $this->db->find$1s($page, $admin);

			return new ViewModel([
				'paginatedItems' => $paginatedItems,
				'messages'  => $this->flashmessenger()->getMessages(),
			]);
		}

		public function createAction($admin = false)
		{

			$form = $this->getForm($admin ? '$2-admin' : '$2');

			$request = $this->getRequest();

			if ($request->isPost()){
				$form->setData($request->getPost());
				if ($form->isValid()){
					$post = $request->getPost();

					$result     = $this->db->create$1($post, $admin);

					if($result)
					{
						$this->flashmessenger()->addMessage('New $1 was added successfully.');
						return $this->redirect()->toRoute('module/' . ($admin ? '${2:module}-admin' : '$2'), ['action' => 'view', 'num' => $result]); 
					}
					else
					{
						$this->flashmessenger()->addMessage('Could not create the $1.');
					}
				}
				else{
					$this->flashmessenger()->addMessage('Form countent was not validated.');
				}
			}
			$viewModel = new ViewModel([
				'form'      => $form,
				'messages'  => $this->flashmessenger()->getMessages(),
			]);
			$viewModel->setTemplate('$2/$2/save.phtml');

			return $viewModel;
		}


		public function editAction($admin = false)
		{

			$form = $this->getForm($admin ? '$2-admin' : '$2');
			$request = $this->getRequest();

			$entity_id = $this->params()->fromRoute('num');

			if ($request->isPost())
			{
				$form->setData($request->getPost());
				if ($form->isValid()){
					$post = $request->getPost();

					$result = $this->db->update$1($entity_id, $post, $admin);

					if($result)
					{
						$this->flashmessenger()->addMessage('The $1 was Updated successfully.');
						return $this->redirect()->toRoute('module/' . ($admin ? '${2:module}-admin' : '$2'), ['action' => 'view', 'num' => $entity_id]);
					}
					else
					{
						$this->flashmessenger()->addMessage('Could not create/update the $1.');
					}
				}
				else{
					$this->flashmessenger()->addMessage('Form countent was not validated.');
				}
			}
			else //Not post, and should load contents from database
			{
				$entity = $this->db->find$1($entity_id, $admin);

				$form->setHydrator(new DoctrineEntity($this->getServiceLocator()->get('Doctrine\ORM\EntityManager'), Entity\User::class));
				$form->bind($entity);

				//$form->setData($data->getData());
			}
			$viewModel = new ViewModel([
				'form'      => $form,
				'messages'  => $this->flashmessenger()->getMessages(),
				'edit' => true,
			]);
			$viewModel->setTemplate('$2/$2/save.phtml');

			return $viewModel;
		}

	}





snippet servfac

	<?php
	namespace ${1:Module}\Service\Factory;

	use Zend\ServiceManager\FactoryInterface;
	use Zend\ServiceManager\ServiceLocatorInterface;

	use Interop\Container\ContainerInterface;

	use $1\Service\\$1Service;

	class $1ServiceFactory implements FactoryInterface
	{
		public function __invoke(ContainerInterface $container, $requestedName, array $options = null)
		{
			return new $1Service($container);
		}
		public function createService(ServiceLocatorInterface $serviceLocator)
		{

		}
	}

snippet serv

	<?php

	namespace ${1:Module}\Service;

	use Zend\Db\ResultSet\ResultSet;

	use \Dashboard\Service\DbBasic;
	use Entity;


	class $1Service extends DbBasic
	{

		public function find$1($entity_id, $admin)
		{
			$entity = $this->orm->find(Entity\\$1::class, $entity_id);

			return $entity;
		}

		public function find$1s($page, $admin)
		{
			$entity = $this->getQb(Entity\\$1::class, 'u');

			return $this->getPaginator($entity->getQuery(), $page);
		}


		public function create$1($post, $admin)
		{

			$entity = new Entity\\$1;

			$entity->setAddress($post['address']);
			$entity->setPhone($post['phone']);

			$this->orm->persist($entity);
			$this->orm->flush();

			return $entity->getId();
		}

		public function update$1($entity_id, $update_entity, $admin)
		{
			$entity = $this->orm->find(Entity\\$1::class, $entity_id);

			$entity->setAddress($update_entity->address);

			$this->orm->persist($entity);
			$this->orm->flush();

			return $entity->getId();
		}

		public function delete$1($entity_id, $admin)
		{
			if($admin || $entity->getDomain() != $_SERVER['HTTP_HOST'])
			{
				$entity = $this->orm->find(Entity\\$1::class, $entity_id);
				$this->orm->remove($entity);
				return $this->orm->flush();
			}
			return false;
		}
	}


snippet viewview


	<div class="tz-2 tz-2-admin">
		<div class="tz-2-com tz-2-main">
			<h4>View ${1:Module}</h4><a class="dropdown-button drop-down-meta drop-down-meta-inn" href="#" data-activates="dr-list"><i class="material-icons">more_vert</i></a>


			<ul id="dr-list" class="dropdown-content">
				<li><a href="<?php echo $this->url('module/' . $this->layout()->controller, ['action' => 'edit', 'num' => $this->item->getId()])?>">Edit</a> </li>
				<li><a href="<?php echo $this->url('module/' . $this->layout()->controller, ['action' => 'delete', 'num' => $this->item->getId()])?>">Delete</a> </li>
			</ul>

			<div class="split-row">
				<div class="col-md-12">
					<div class="box-inn-sp ad-inn-page">
						<div class="tab-inn ad-tab-inn">
							<div class="hom-cre-acc-left hom-cre-acc-right">



										<table class="responsive-table bordered">
											<tbody>
												<tr>
													<td>ID</td>
													<td>:</td>
													<td><?php echo $this->item->getId()?></td>
												</tr>
											</tbody>
										</table>


							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

snippet viewlist

	<div class="tz-2 tz-2-admin">
		<div class="tz-2-com tz-2-main">
			<h4>Manager ${1:Module}</h4> <a class="dropdown-button drop-down-meta drop-down-meta-inn" href="#" data-activates="dr-list"><i class="material-icons">more_vert</i></a>
			<ul id="dr-list" class="dropdown-content">
				<li><a href="<?php echo $this->url('module/' . $this->layout()->controller, ['action' => 'create'])?>">Add New</a> </li>
			</ul>
			<!-- Dropdown Structure -->
			<div class="split-row">
				<div class="col-md-12">
					<div class="box-inn-sp ad-inn-page">
						<div class="tab-inn ad-tab-inn">
							<div class="table-responsive">

								<?php if($this->messages):?>
								<ul>
								<?php foreach($this->messages as $message):?>
									<li><b><?php echo $message ?></b></li>
								<?php endforeach; ?>
								</ul>
								<?php endif;?>

								<table class="responsive-table bordered">
									<thead>
											<th>ID</th>
											<th>Activity</th>
									</thead>
									<tbody>
										<?php foreach($paginatedItems as $item): ?>
										<tr>
											<td>
												<a href="<?php echo $this->url('module/' . $this->layout()->controller, ['action' => 'view', 'num' => $item->getId()])?>"><?php  echo $item->getId()?></a>
											</td>
											<td>
												<a href="<?php echo $this->url('module/' . $this->layout()->controller, ['action' => 'edit', 'num'         => $item->getId()])?>" class="db-list-edit">Edit</a>
												<a href="<?php echo $this->url('module/' . $this->layout()->controller, ['action' => 'delete', 'num'       => $item->getId()])?>" class="db-list-delete">Delete</a>
											</td>
										</tr>
										<?php endforeach; ?>
									</tbody>
								</table>

							</div>
						</div>
					</div>

					<?php
					 // add at the end of the file after the table
					 echo $this->paginationControl(
						 // the paginator object
						 $this->paginatedItems,
						 // the scrolling style
						 'sliding',
						 // the partial to use to render the control
						 'partial/paginator.phtml',
						 // the route to link to when a user clicks a control link
						 [
							 'route' => 'module', 
							 'controller' => $this->layout()->controller,
							 'action' => 'list'
						 ]
					 );
					?>
				</div>
			</div>
		</div>
	</div>

snippet viewsave
	<?php
	$form = $this->form;
	$form->prepare();
	?>

		<h4>Manage ${1:Module}</h4>
		<div class="db-list-com tz-db-table">
			<div class="ds-boar-title">
				<?php if($this->edit): ?>
				<h2>Edit $1</h2>
				<?php else: ?>
				<h2>Add New $1</h2>
				<?php endif;?>
				<p>All the Lorem Ipsum generators on the All the Lorem Ipsum generators on the</p>
			</div>
			<div class="hom-cre-acc-left hom-cre-acc-right">
				<div class="">


					<?php if($this->messages):?>
					<ul>
					<?php foreach($this->messages as $message):?>
						<li><b><?php echo $message ?></b></li>
					<?php endforeach; ?>
					</ul>
					<?php endif;?>

					<?php echo $this->form()->openTag($form);?> 


						<?php foreach($form as $element):?>
							<?php if($element->getAttributes()['type'] != 'submit' and $element->getOption('type') != 'collection'): ?>

							<div class="row">
								<div class="input-field col s12">
									<?php echo $this->formElement($element);?>
									<label><?php echo $element->getOption('label');?></label>
								</div>
								<div><?php echo $this->formElementErrors($element);?></div>
							</div>

							<?php endif;?>
						<?php endforeach;?>

						<div class="row">
							<div class="input-field col s12"> 
								<a class="waves-effect waves-light btn-large full-btn" href="javascript:document.forms.$1.submit()">Submit $1</a> 
							</div>
						</div>
					<?php echo $this->form()->closeTag($form);?> 
				</div>
			</div>
		</div>

	<script>
		CKEDITOR.replace( 'listing_description' );
	</script>



snippet formfac
	<?php
	namespace ${1:Module}\Form\\$1;

	use Zend\ServiceManager\FactoryInterface;
	use Zend\ServiceManager\ServiceLocatorInterface;

	use Interop\Container\ContainerInterface;
	use Zend\ServiceManager\Factory\InvokableFactory;
	use Zend\ServiceManager\ServiceManager;


	class $1FormFactory implements FactoryInterface
	{
		public function __invoke(ContainerInterface $container, $requestedName, array $options = null)
		{
			$form = new $1Form($container, $requestedName);
			$form->setInputFilter(new $1FormFilter($requestedName));
			return  $form;
		}
		public function createService(ServiceLocatorInterface $serviceLocator)
		{
		}
	}

	?>

snippet form
	<?php

	namespace ${1:Module}\Form\\$1;
	 
	use Zend\Form\Element;
	use Zend\Form\Form;
	 
	use Interop\Container\ContainerInterface;
	use Zend\Db\Sql\Sql;

	class $1Form extends Form {

		protected $container;
		protected $dbAdapter;
	 
		public function __construct(ContainerInterface $container, $requestedName ) 
		{

			$this->container = $container;

			parent::__construct();
	 
			$this->setName('$1');
			$this->setAttribute('method', 'post');


			$this->add([
				'name' => 'name',
				'attributes' => [
					'type' => 'input',
				],
				'options' => [
					'label' => 'Full Name',
				]
			]);

			$this->add(new Element\Csrf('security'));

			$this->add([
				'name' => 'submit',
				'attributes' => [
					'type' => 'submit',
					'value' => 'Submit',
				],
			]);
		}

	}

snippet formfil
	<?php

	namespace ${1:Module}\Form\\$1;
	use Zend\InputFilter\InputFilter;
	 
	class $1FormFilter extends InputFilter {
	 
		public function __construct($requestedName) {


			$this->add([
				'name' => 'name',
				'required' => true,
				'filters' => [
					['name' => 'StripTags'],
					['name' => 'StringTrim'],
				],
				'validators' => [
					[
						'name' => 'StringLength',
						'options' => [
							'encoding' => 'UTF-8',
							'min' => 1,
							'max' => 100,
						],
					],
				],
			]);


		}
	}
