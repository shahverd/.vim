snippet thisf "new this.function definition" b
/**
`!p
args = [arg for arg in t[2].split(', ') if arg]
snip.rv += snip.mkline('')

for a in args:
	snip.rv += snip.mkline('*  @param:	') + a + "\n"

snip.rv += snip.mkline('*/')
`
this.${1:function_name} = function(${2:args}){
	${0}
}
endsnippet

# TODO commenting
snippet todo
// [TODO]: ${1:Description}
endsnippet



#Angular
snippet iti "it (js, inject)" b
it('${1:description}', inject(function($2) {
	$0
}));
endsnippet

snippet befi "before each (js, inject)" b
beforeEach(inject(function($1) {
	$0
}));
endsnippet

snippet aconf "angular config" i
config(function($1) {
	$0
});
endsnippet

snippet acont "angular controller" i
controller('${1:name}', ['${2:param_annotation}', function(${3:param}) {
	$0
}]);
endsnippet

snippet aconts "angular controller with scope" i
controller('${1:name}', ['$scope', function($scope) {
	$0
}]);
endsnippet

snippet adir "angular directive" i
directive('${1:name}', ['${2:param_annotation}', function(${3:param}) {
	$0
}]);
endsnippet

snippet adirs "angular directive with scope" i
directive('${1:name}', ['$scope', function($scope) {
	$0
}]);
endsnippet

snippet afact "angular factory" i
factory('${1:name}', ['${2:param_annotation}', function(${3:param}) {
	$0
}]);
endsnippet

snippet afacts "angular factory with scope" i
factory('${1:name}', ['$scope', function($scope) {
	$0
}]);
endsnippet

snippet aserv "angular service" i
service('${1:name}', ['${2:param_annotation}', function(${3:param}) {
	$0
}]);
endsnippet

snippet aservs "angular service" i
service('${1:name}', ['$scope', function($scope) {
	$0
}]);
endsnippet
#Angular-end
